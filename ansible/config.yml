---
- name: Kubernetes and Docker Installation Playbook
  hosts: all
  become: yes

#  vars:
#    common_packages:
#      - apt-transport-https
#      - ca-certificates
#      - curl
#      - gnupg-agent
#      - software-properties-common

  tasks:
    - name: Copy script to remote
      copy:
        src: ../sh/conf.sh
        dest: /
        mode: '0755'

    - name: Exec the script
      command: /conf.sh "{{ USERNAME }}" "{{ PASSWORD }}"
      environment:
        USERNAME: "{{ USERNAME }}"
        PASSWORD: "{{ PASSWORD }}"

#    - name: Installing common packages
#      apt:
#        name: "{{ common_packages }}"

    - name: Ensure /etc/apt/keyrings directory exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Adding Kubernetes GPG key
      get_url:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        dest: /tmp/kubernetes-archive-keyring.gpg
        mode: '0644'

    - name: Dearmor Kubernetes GPG key
      command: gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg /tmp/kubernetes-archive-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-archive-keyring.gpg

    - name: Check if Kubernetes repo is in sources.list
      command: grep -qs "https://apt.kubernetes.io/" /etc/apt/sources.list.d/kubernetes.list
      register: repo_check
      ignore_errors: yes
      changed_when: false

    - name: Adding apt repository for Kubernetes
      block:
        - name: Add Kubernetes repo to sources.list
          copy:
            content: "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main"
            dest: /etc/apt/sources.list.d/kubernetes.list
        - name: Update apt package cache
          apt:
            update_cache: yes
      when: repo_check.rc != 0

    - name: Install Kubernetes binaries
      apt:
        name:
          - kubelet=1.26.5-00
          - kubeadm=1.26.5-00
          - kubectl=1.26.5-00
        state: present
        update_cache: yes

    - name: Check if Docker is installed
      command: command -v docker
      register: docker_check
      ignore_errors: yes
      changed_when: false

    - name: Install Docker
      apt:
        name: docker.io
        state: present
      when: docker_check.rc != 0

    - name: Ensure /etc/containerd directory exists
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'
      register: containerd_directory

    - name: Configure containerd
      block:
        - name: Generate containerd default configuration
          ansible.builtin.shell: |
            containerd config default > /etc/containerd/config.toml 2>&1
          register: containerd_config_gen
          ignore_errors: true
        
        - name: Display output of containerd config generation
          ansible.builtin.debug:
            msg: "{{ containerd_config_gen.stdout_lines }}"

        - name: Set SystemdCgroup to true in containerd config
          ansible.builtin.lineinfile:
            path: /etc/containerd/config.toml
            regexp: '^SystemdCgroup = false'
            line: 'SystemdCgroup = true'
          when: containerd_config_gen.rc == 0

        - name: Restart containerd service
          ansible.builtin.systemd:
            name: containerd
            state: restarted
          when: containerd_config_gen.rc == 0

#    - name: Configure containerd
#      block:
#        - name: Generate containerd default configuration
#          command: containerd config default
#          args:
#            creates: /etc/containerd/config.toml
#        - name: Set SystemdCgroup to true in containerd config
#          lineinfile:
#            path: /etc/containerd/config.toml
#            regexp: '^SystemdCgroup = false'
#            line: 'SystemdCgroup = true'
#        - name: Restart containerd service
#          systemd:
#            name: containerd
#            state: restarted
#      when: containerd_directory.changed
