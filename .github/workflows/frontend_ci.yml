name: CI Pipeline Frontend-Service

on:
  push:
    paths:
      - 'app/frontend-service/**' 
      - 'app/frontend-service/**.py'
      - 'app/frontend-service/templates/**.html'

jobs:
  editorconfig:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: check if editorconfig exists
        if: ${{ hashFiles('.editorconfig') == '' }}
        run: exit 'editorconfig does not exist.'

      - name: Add checker
        uses: editorconfig-checker/action-editorconfig-checker@main

      - name: Run checker
        run: editorconfig-checker      

  linters:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: pip install black

      - name: Run the linters
        uses: wearerequired/lint-action@v2
        with:
          black: true

  unit-tests:
    runs-on: ubuntu-latest
    needs: [editorconfig, linters]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Requirements
        working-directory: ./app/frontend-service
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Unit Test
        working-directory: ./app/frontend-service
        run: python -m unittest test_frontend_service.py

  scan:
    name: GitLeaks
    runs-on: ubuntu-latest
    needs: [editorconfig, linters, unit-tests]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACTIONS_STEP_DEBUG: true

  code-smells:
    name: SonarCloud
    needs: [editorconfig, linters, unit-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 
      - uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-push-test:
    runs-on: ubuntu-latest
    needs: [editorconfig, linters, unit-tests, scan, code-smells]

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app/frontend-service
          file: ./app/frontend-service/Dockerfile
          push: true
          tags: '${{ secrets.DOCKERHUB_USERNAME }}/frontend-service:${{ github.sha }}'
          platforms: linux/amd64, linux/arm64

      - name: Scan with trivy
        id: trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.DOCKERHUB_USERNAME }}/frontend-service:${{ github.sha }}'
          severity: 'CRITICAL'

  building-infrastructure:
    runs-on: ubuntu-latest
    needs: [build-push-test]
    outputs:
      server_ip: ${{ steps.terraform_output.outputs.SERVER_IP }}

    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.6"

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Output Server IP
        run: |
          echo "SERVER_IP=$(terraform output -raw server_ip)" >> $GITHUB_ENV
        working-directory: ./terraform
  
  configure-vm:
    runs-on: ubuntu-latest
    needs: [building-infrastructure]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: 
        run: |
          ansible-playbook -i "${{ env.SERVER_IP }}," configuration.yml
        env:
          USERNAME: ${{ secrets.USERNAME }}
          PASSWORD: ${{ secrets.PASSWORD }}