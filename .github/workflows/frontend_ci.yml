name: CI Pipeline Frontend Service

on:
  push:
   branches:
     - main

jobs:
  editorconfig:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: check if editorconfig exists
        if: ${{ hashFiles('.editorconfig') == '' }}
        run: exit 'editorconfig does not exist.'

      - name: Add checker
        uses: editorconfig-checker/action-editorconfig-checker@main

      - name: Run checker
        run: editorconfig-checker      

  linters:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: pip install black pylint flake8

      - name: Run the linters
        uses: wearerequired/lint-action@v2
        with:
          black: true
          pylint: true
          flake8: true

  unit-tests:
    runs-on: ubuntu-latest
    needs: [editorconfig, linters]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install requirements
        working-directory: ./frontend-service
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Unit Test
        working-directory: ./frontend-service
        run: python -m unittest test_frontend_service.py

  scan:
    name: gitleaks
    runs-on: ubuntu-latest
    needs: [editorconfig, linters, unit-tests]
    steps:
      - uses: actions/checkout@v3
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  code-smells:
    name: SonarCloud
    needs: [editorconfig, linters, unit-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 
      - uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#  review-security-issues:
#    name: Snyk
#    runs-on: ubuntu-latest
#    needs: [unit-tests, code-smells, scan]
#    steps:
#      - uses: actions/checkout@v4
#      - uses: snyk/actions/python-3.10@master
#        env:
#          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#        with:
#          args: --severity-threshold=critical

  build-scan-push:
    runs-on: ubuntu-latest
    needs: [editorconfig, linters, unit-tests, scan, code-smells]

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export to Docker
        uses: docker/build-push-action@v5
        id: build
        with:
          context: ./frontend-service
          file: ./frontend-service/Dockerfile
          load: true

      - name: Scan image with trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build.outputs.imageid }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL"

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: georgiyovchev/frontend-service:${{ github.sha }}
          platforms: linux/amd64, linux/arm64
